openapi: "3.0.0"
info:
  title: Social Network API
  version: "1.0"
servers:
  - url: http://localhost:8090
components:
  schemas:
    UserInfo:
      type: object
      properties:
        firstName:
          type: string
          example: "Ivan"
        lastName:
          type: string
          example: "Ivanov"
        birthdate:
          type: string
          format: YYYY-MM-DD
          example: "2000-01-01"
        email:
          type: string
          example: "iivanov@example.com"
        phoneNumber:
          type: string
          example: "+71234567890"
    UserCredentials:
      type: object
      properties:
        login:
          type: string
          example: "user007"
        password:
          type: string
          example: "qwerty"
      required:
        - login
        - password
    Post:
      type: object
      properties:
        postID:
          type: integer
        userID:
          type: integer
        content:
          type: string
        createdAt:
          type: timestamp
    PostContent:
      type: object
      properties:
        content:
          type: string
  securitySchemes:
    cookieAuth:            
      type: apiKey
      in: cookie
      name: jwt
paths:
  /user/login:
    post:
      summary: Logs user into the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: Successful operation
          headers:
            Set-Cookie:
              description: JWT token
              schema:
                type: string
        '403':
          description: Invalid login/password supplied
  /user/signup:
    post:
      summary: Create user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: Successful operation
          headers:
            Set-Cookie:
              description: JWT token
              schema:
                type: string
        '403':
          description: User already exists
  /user/profile:
    put:
      summary: Update user information
      description: This can only be done by the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        '200':
          description: Successful operation
        '401':
          description: No cookie or invalid
      security:
        - cookieAuth: []
  /post:
    post:
      summary: Create a new post 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostContent'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
      security:
        - cookieAuth: []
  /post/{postId}:
    get:
      summary: Get post by id
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post id
      security:
        - cookieAuth: []
    put:
      summary: Update post by id
      description: This can only be done by the author of the post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostContent'
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid user or post id
      security:
        - cookieAuth: []
    delete:
      summary: Delete post by id
      description: This can only be done by the author of the post
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid user or post id
      security:
        - cookieAuth: []
  /post/page:
    get:
      summary: Get a list of user posts with pagination sorted by creation time
      parameters:
        - name: page
          in: query
          description: sequential number of the page
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          description: number of posts per page
          required: true
          schema:
            type: integer
        - name: userId
          in: query
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post id
      security:
        - cookieAuth: []
  /like/{postId}:
    post:
      summary: Like post by id
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid post id
      security:
        - cookieAuth: []
  /view/{postId}:
    post:
      summary: View post by id
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid post id
      security:
        - cookieAuth: []
  /stat/{postId}:
    get:
      summary: Get likes and views by post id
      parameters:
        - name: postId
          in: path
          description: post id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid post id
      security:
        - cookieAuth: []
  /stat/top5posts:
    get:
      summary: Get top 5 posts by likes or views
      parameters:
        - name: orderBy
          in: query
          description: "likes" or "views"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
      security:
        - cookieAuth: []
  /stat/top3users:
    get:
      summary: Get top 3 users by likes
      responses:
        '200':
          description: Successful operation
      security:
        - cookieAuth: []
